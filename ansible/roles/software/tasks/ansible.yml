# Additional Ansible language tools
---
#
# Ansible Language Server
# Source: https://github.com/ansible/ansible-language-server
#
- name: "[Ansible] Get NPM version string"
  ansible.builtin.shell: |
    set -e -o pipefail
    source {{ ansible_env.HOME }}/.local/opt/nvm/nvm.sh || echo 'nvm.sh cannot be found in this directory'
    nvm list current | grep -E 'v[0-9]*\.[0-9]*\.[0-9]*' -o || echo 'Cannot get current NVM version'
  changed_when: false
  args:
    executable: /bin/bash
  register: npm_version

- name: "[Ansible] Install Ansible Language server for current NPM"
  ansible.builtin.shell: |
    set -e -o pipefail
    npm install @ansible/ansible-language-server --location=global
  changed_when: false
  args:
    executable: /bin/bash
  environment:
    PATH: "{{ ansible_env.HOME }}/.local/opt/nvm/versions/node/{{ npm_version.stdout }}/bin:{{ ansible_env.PATH }}"

#
# ansible-lint
#
- name: "[Ansible] Install Ansible PIP specific version"
  ansible.builtin.pip:
    name: "ansible=={{ ansible_pip_version }}"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: ansible_pip_version != 'latest'

- name: "[Ansible] Install Ansible PIP latest version"
  ansible.builtin.pip:
    name: "ansible"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
    extra_args: --upgrade
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: ansible_pip_version == 'latest'

- name: "[Ansible] Get installed Ansible version from PIP"
  ansible.builtin.shell: |
    set -e -o pipefail
    {{ ansible_env.HOME }}/.pyenv/shims/pip3 show ansible | grep Version | awk '{print $2}'
  changed_when: false
  args:
    executable: /bin/bash
  register: ansible_version_pip
  tags:
    - versions

- name: "[ansible] Save used version"
  vars:
    app: ansible
    target_version:
      ansible_pip_version: "{{ ansible_version_pip.stdout }}"
    yq_query: ".ansible_pip_version = \"{{ ansible_version_pip.stdout }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[Ansible] Install ansible-lint PIP specific version"
  ansible.builtin.pip:
    name: "ansible-lint=={{ ansible_lint_pip_version }}"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: ansible_lint_pip_version != 'latest'

- name: "[Ansible] Install ansible-lint PIP latest version"
  ansible.builtin.pip:
    name: "ansible-lint"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
    extra_args: --upgrade
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: ansible_lint_pip_version == 'latest'

- name: "[Ansible] Get installed Ansible version from PIP"
  ansible.builtin.shell: "set -e -o pipefail; {{ ansible_env.HOME }}/.pyenv/shims/pip3 show ansible-lint | grep Version | awk '{print $2}'"
  changed_when: false
  args:
    executable: /bin/bash
  register: ansible_lint_version
  tags:
    - versions

- name: "[ansible-lint] Save used version"
  vars:
    app: ansible-lint
    target_version:
      ansible_lint_pip_version: "{{ ansible_lint_version.stdout }}"
    yq_query: ".ansible_lint_pip_version = \"{{ ansible_lint_version.stdout }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions
