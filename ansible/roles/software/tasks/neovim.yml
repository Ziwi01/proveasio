# Install Neovim
# Source: https://github.com/neovim/neovim
---
- name: "[Neovim] Check installed exact Neovim version"
  ansible.builtin.command: nvim --version | grep -e '^NVIM' | cut -d ' ' -f 2
  register: neovim_check_exact
  ignore_errors: true
  changed_when: neovim_check_exact.rc > 1
  failed_when: neovim_check_exact.rc > 1
  tags:
    - versions

- name: "[Neovim] Get Github URL for proper release version"
  vars:
    app: neovim
    repo: neovim/neovim
    version_query: curl -s https://api.github.com/repos/neovim/neovim/releases/latest | jq .tag_name | tr -d '"' | tr -d 'v'
    github_uri: "v{{ neovim_version }}/nvim-linux-x86_64.appimage"
  ansible.builtin.include_role:
    name: common
    tasks_from: github_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions
  when: github_packages['neovim'] != 'nightly'

- name: "[Neovim] Get Neovim nightly version"
  ansible.builtin.shell: |
    set -e -o pipefail
    curl -s https://api.github.com/repos/neovim/neovim/releases | jq -r 'map(select(.prerelease)) | first | .body' | grep -E '^NVIM ' | cut -d ' ' -f 2
  args:
    executable: /bin/bash
  register: neovim_version_exact
  ignore_errors: true
  changed_when: neovim_version_exact.rc > 1
  failed_when: neovim_version_exact.rc > 1
  tags:
    - versions
  when: github_packages['neovim'] == 'nightly'

- name: "[Neovim] Get Github URL for nightly version"
  vars:
    app: neovim
    repo: neovim/neovim
    github_uri: "nightly/nvim-linux-x86_64.appimage"
  ansible.builtin.include_role:
    name: common
    tasks_from: github_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions
  when: github_packages['neovim'] == 'nightly'

- name: "Installation"
  when: neovim_version | default(neovim_check_exact) != neovim_check_exact or (neovim_version_exact.stdout | default(neovim_check_exact) != neovim_check_exact)
  block:
    - name: "[Neovim] Create release directory in {{ ansible_env.HOME }}/.local/opt"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/opt/neovim-{{ neovim_version }}"
        state: directory
        mode: '0755'
      when: github_packages['neovim'] != 'nightly'

    - name: "[Neovim] Create nightly directory in {{ ansible_env.HOME }}/.local/opt"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/opt/neovim-nightly"
        state: directory
        mode: '0755'
      when: github_packages['neovim'] == 'nightly'

    - name: "[Neovim] Download Neovim release"
      ansible.builtin.get_url:
        url: "{{ neovim_url }}"
        dest: "{{ ansible_env.HOME }}/.local/opt/neovim-{{ neovim_version }}/nvim-{{ neovim_version }}.appimage"
        mode: '0755'
        force: true
      when: github_packages['neovim'] != 'nightly'

    - name: "[Neovim] Link Neovim release appimage"
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/.local/opt/neovim-{{ neovim_version }}/nvim-{{ neovim_version }}.appimage"
        dest: "{{ ansible_env.HOME }}/.local/bin/nvim"
        state: link
        force: true
      become: true
      when: github_packages['neovim'] != 'nightly'

    - name: "[Neovim] Download Neovim nightly"
      ansible.builtin.get_url:
        url: "{{ neovim_url }}"
        dest: "{{ ansible_env.HOME }}/.local/opt/neovim-nightly/nvim-{{ neovim_version_exact.stdout }}.appimage"
        mode: '0755'
        force: true
      when: github_packages['neovim'] == 'nightly'

    - name: "[Neovim] Link Neovim nightly appimage"
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/.local/opt/neovim-nightly/nvim-{{ neovim_version_exact.stdout }}.appimage"
        dest: "{{ ansible_env.HOME }}/.local/bin/nvim"
        state: link
        force: true
      become: true
      when: github_packages['neovim'] == 'nightly'

- name: "[Neovim] Save used version"
  vars:
    app: neovim
    target_version:
      github_packages:
        neovim: "{{ neovim_version }}"
    yq_query: ".github_packages.neovim = \"{{ neovim_version }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions
