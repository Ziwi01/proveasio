# SDKMan! to install different SDKs/JDKs
# Source: https://sdkman.io/
#
# Below code is largely based on https://github.com/Comcast/ansible-sdkman ansible role written by Elliot Weiser
---
- name: "[SDKMan] Check for SDKMAN installation"
  ansible.builtin.stat:
    path: '{{ sdkman_dir }}/bin/sdkman-init.sh'
  register: sdkman_init

# Install SDKMAN if not uninstalled
- name: "[SDKMan] Install SDKMAN!"
  when: not sdkman_init.stat.exists
  become: '{{ sdkman_user != ansible_user_id }}'
  become_user: '{{ sdkman_user }}'
  block:
    - name: "[SDKMan] Download SDKMAN"
      ansible.builtin.get_url:
        url: https://get.sdkman.io
        dest: '{{ sdkman_tmp_dir }}/sdkman_script'
        owner: '{{ sdkman_user }}'
        group: '{{ sdkman_group }}'
        mode: '0755'
        validate_certs: '{{ sdkman_validate_ssl }}'

    - name: "[SDKMan] Run SDKMAN script"
      environment:
        SDKMAN_DIR: '{{ sdkman_dir }}'
      ansible.builtin.command: /bin/bash {{ sdkman_tmp_dir }}/sdkman_script
      args:
        creates: '{{ sdkman_dir }}/bin/sdkman-init.sh'
      notify: "[SDKMan] Cleanup SDKMAN script"

- name: "[SDKMan] Fix permissions on SDKMAN_DIR"
  ansible.builtin.file:
    path: '{{ sdkman_dir }}'
    state: directory
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'
    recurse: true
  become: true
  tags:
    - sdkman_privilege

- name: "[SDKMan] Flush SDK caches (before)"
  ansible.builtin.shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk flush {{ item }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_flush_caches_before }}'
  changed_when: false

- name: "[SDKMan] Update SDKMAN"
  ansible.builtin.shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk selfupdate
  args:
    executable: /bin/bash
  register: sdk_selfupdate
  changed_when: sdk_selfupdate.stdout != 'No update available at this time.'
  when: sdkman_update | bool

- name: "[SDKMan] Install SDK candidates/versions"
  ansible.builtin.shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk install {{ item.candidate }} {{ item.version | default('') }} {{ item.localpath | default('') }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_install_packages }}'
  register: sdk_install
  changed_when: >-
    'is already installed.' not in sdk_install.stdout
  failed_when: >-
    sdk_install.rc != 0 and
    'is already installed.' not in sdk_install.stdout

- name: "[SDKMan] Save used version"
  vars:
    app: SDKMan
    target_version:
      sdkman_install_packages: "{{ sdkman_install_packages }}"
    yq_query: ".sdkman_install_packages |= {{ sdkman_install_packages | regex_replace(\"'\", '\"') }}"
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[SDKMan] Uninstall SDK candidates/versions"
  ansible.builtin.shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk uninstall {{ item.candidate }} {{ item.version }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_uninstall_packages }}'
  register: sdk_uninstall
  changed_when: >-
    not item.candidate + ' ' + item.version + ' is not installed.'
    in sdk_uninstall.stdout

- name: "[SDKMan] Get SDK defaults"
  ansible.builtin.shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk current {{ item }}
  args:
    executable: /bin/bash
  register: get_sdk_defaults
  changed_when: false
  loop: >-
    {{ sdkman_install_packages | map(attribute="candidate") | unique | list }}

- name: "[SDKMan] Set SDK defaults"
  ansible.builtin.shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk default {{ item.key }} {{ item.value }}
  args:
    executable: /bin/bash
  loop: "{{ sdkman_defaults | dict2items }}"
  changed_when: >-
    not item.value in
    (get_sdk_defaults.results |
     selectattr('item', 'equalto', item.key) |
     first).stdout

- name: "[SDKMan] Save used version"
  vars:
    app: SDKMan
    target_version:
      sdkman_defaults: "{{ sdkman_defaults }}"
    yq_query: ".sdkman_defaults |= {{ sdkman_defaults | regex_replace(\"'\", '\"') }}"
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[SDKMan] Flush SDK caches (after)"
  ansible.builtin.shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk flush {{ item }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_flush_caches_after }}'
  changed_when: false

- name: "[SDKMan] Update alternatives"
  community.general.alternatives:
    name: "{{ item.name }}"
    path: "{{ sdkman_dir }}/candidates/{{ item.candidate }}/current/bin/{{ item.name }}"
    link: "{{ item.link }}"
  loop: "{{ sdkman_update_alternatives }}"
  become: true
  tags:
    - sdkman_privilege
