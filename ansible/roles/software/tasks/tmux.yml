# TMUX plugin manager
# Source: https://github.com/tmux-plugins/tpm
---
- name: "[Tmux] Get Github URL for proper version"
  vars:
    app: tmux
    repo: tmux/tmux
    version_query: curl -s https://api.github.com/repos/tmux/tmux/releases/latest | jq .name -r | cut -f2 -d'v' | awk '{ print $2 }'
    github_uri: "{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz"
  ansible.builtin.include_role:
    name: common
    tasks_from: github_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[Tmux][TPM] Get Github URL for proper version"
  vars:
    app: tpm
    repo: tmux-plugins/tpm
    version_query: curl -s https://api.github.com/repos/tmux-plugins/tpm/commits/master | jq -r '.sha'
  ansible.builtin.include_role:
    name: common
    tasks_from: github_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[Tmux] Check if Tmux {{ tmux_version }} is installed"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }}"
  register: tmux_dir

- name: "Installation"
  when: not tmux_dir.stat.exists
  block:
    - name: "[Tmux] Download Tmux {{ tmux_version }}"
      ansible.builtin.get_url:
        url: "{{ tmux_url }}"
        dest: "/tmp/tmux-{{ tmux_version }}.tar.gz"
        mode: '0755'

    - name: "[Tmux] Create directory in {{ ansible_env.HOME }}/.local/opt"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }}"
        state: directory
        mode: '0755'

    - name: "[Tmux] Turn on failed installation handler"
      ansible.builtin.set_fact:
        tmux_failed: true

    - name: "[Tmux] Untar archive"
      ansible.builtin.unarchive:
        src: "/tmp/tmux-{{ tmux_version }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/opt"

    - name: "[Tmux] Configure & make"
      ansible.builtin.shell: "./configure && make"
      args:
        chdir: "{{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }}"

    - name: "[Tmux] Make install"
      ansible.builtin.command: "make install"
      args:
        chdir: "{{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }}"
      become: true

    - name: "[Tmux] Turn off failed installation handler"
      ansible.builtin.set_fact:
        tmux_failed: false

    - name: "[Tmux] Cleanup tar.gz file"
      ansible.builtin.file:
        path: "/tmp/tmux-{{ tmux_version }}.tar.gz"
        state: absent

    - name: "[TMUX] Create Tmux plugin dir {{ ansible_env.HOME }}/.tmux/plugins"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.tmux/plugins"
        state: directory
        mode: '0755'
        recurse: true

    - name: "[TMUX] Clone/update Tmux plugin manager"
      ansible.builtin.git:
        repo: "{{ tpm_git_url }}"
        dest: "{{ tmux_plugins_dir }}/tpm"
        force: true
        update: true
        version: "{{ tpm_version }}"
  rescue:
    - name: "[Tmux] Remove TMUX dir {{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }} as installation failed"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/opt/tmux-{{ tmux_version }}"
        state: absent
      when: tmux_failed | bool

    - name: "[Tmux] Fail run if TMUX installation failed"
      ansible.builtin.fail:
        msg: '[Tmux] There was an error during Tmux installation, failing build... See output above for more details.'
      when: tmux_failed | bool

- name: "[TMUX] Install tmuxp session manager"
  ansible.builtin.pip:
    name: "tmuxp"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"

- name: "[Tmux] Install tmuxp session manager specific version"
  ansible.builtin.pip:
    name: "tmuxp=={{ pip_packages['tmuxp'] }}"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: pip_packages['tmuxp'] != 'latest'

- name: "[Tmux] Install tmuxp latest version"
  ansible.builtin.pip:
    name: "tmuxp"
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip3"
    extra_args: --upgrade
  register: pip_out
  changed_when: "'Requirement already satisfied' not in pip_out.stdout"
  when: pip_packages['tmuxp'] == 'latest'

- name: "[tmux] Get installed tmuxp version"
  ansible.builtin.shell: |
    set -e -o pipefail
    {{ ansible_env.HOME }}/.pyenv/shims/pip3 show tmuxp | grep Version | awk '{print $2}'
  args:
    executable: /bin/bash
  changed_when: false
  register: tmuxp_version
  tags:
    - versions

- name: "[Tmux] Save used tmuxp version"
  vars:
    app: tmuxp
    target_version:
      pip_packages:
        tmuxp: "{{ tmuxp_version.stdout }}"
    yq_query: ".pip_packages.tmuxp = \"{{ tmuxp_version.stdout }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[Tmux] Save used tmux version"
  vars:
    app: tmux
    target_version:
      github_packages:
        tmux: "{{ tmux_version }}"
    yq_query: ".github_packages.tmux = \"{{ tmux_version }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions

- name: "[Tmux] Save used version for plugin manager"
  vars:
    app: tpm
    target_version:
      github_packages:
        tpm: "{{ tpm_version }}"
    yq_query: ".github_packages.tpm = \"{{ tpm_version }}\""
  ansible.builtin.include_role:
    name: common
    tasks_from: save_version.yml
    apply:
      tags:
        - versions
  tags:
    - versions
